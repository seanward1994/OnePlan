name: OnePlan — One-Click Build, Self-Heal & Dump

on:
  workflow_dispatch:
  push:
    branches: [ main, refactor/v1 ]

permissions:
  contents: write    # needed to commit FULL_CODE_DUMP.txt back

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Self-heal project (Gradle wrapper, settings, root/app gradle)
        shell: bash
        run: |
          set -euo pipefail

          # --- Gradle wrapper (so ./gradlew works) ---
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties <<'EOF'
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-bin.zip
          EOF

          cat > gradlew <<'EOF'
          #!/usr/bin/env bash
          set -e
          exec ./gradle -q "$@"
          EOF
          chmod +x gradlew

          # --- Minimal root gradle (NO plugins{} here) ---
          cat > build.gradle.kts <<'KTS'
          // Root kept minimal to avoid duplicate `plugins {}` issues
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          KTS

          # --- settings.gradle.kts with pluginManagement so AGP resolves from Google Maven ---
          cat > settings.gradle.kts <<'KTS'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                  google()
                  mavenCentral()
              }
          }
          rootProject.name = "OnePlanAndroid"
          include(":app")
          KTS

          # --- app module skeleton (safe overwrite) ---
          mkdir -p app/src/main/java/com/oneplan/app app/src/main/res/{values,mipmap-anydpi-v26,drawable}

          cat > app/build.gradle.kts <<'KTS'
          plugins {
              id("com.android.application") version "8.5.2"
              kotlin("android") version "1.9.23"
              id("com.google.devtools.ksp") version "1.9.23-1.0.20"
          }
          android {
              namespace = "com.oneplan.app"
              compileSdk = 34
              defaultConfig {
                  applicationId = "com.oneplan.app"
                  minSdk = 24
                  targetSdk = 34
                  val vc = (System.getenv("VC") ?: runCatching {
                      file("${rootDir}/.oneplan_versioncode").takeIf { it.exists() }?.readText()?.trim()
                  }.getOrNull() ?: "1").toInt()
                  versionCode = vc
                  versionName = "0.3.$vc"
                  vectorDrawables { useSupportLibrary = true }
              }
              buildTypes {
                  release {
                      isMinifyEnabled = false
                      proguardFiles(
                          getDefaultProguardFile("proguard-android-optimize.txt"),
                          "proguard-rules.pro"
                      )
                  }
                  debug { isDebuggable = true }
              }
              buildFeatures { compose = true }
              composeOptions { kotlinCompilerExtensionVersion = "1.5.12" }
              compileOptions {
                  sourceCompatibility = JavaVersion.VERSION_17
                  targetCompatibility = JavaVersion.VERSION_17
              }
              kotlinOptions { jvmTarget = "17" }
              packaging { resources { excludes += "/META-INF/{AL2.0,LGPL2.1}" } }
          }
          dependencies {
              val composeBom = platform("androidx.compose:compose-bom:2024.08.00")
              implementation(composeBom)
              androidTestImplementation(composeBom)

              implementation("androidx.core:core-ktx:1.13.1")
              implementation("androidx.activity:activity-compose:1.9.2")
              implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.5")

              implementation("androidx.compose.ui:ui")
              implementation("androidx.compose.ui:ui-tooling-preview")
              implementation("androidx.compose.material3:material3")
              implementation("androidx.compose.material:material-icons-extended")

              debugImplementation("androidx.compose.ui:ui-tooling")
              debugImplementation("androidx.compose.ui:ui-test-manifest")
              androidTestImplementation("androidx.test.ext:junit:1.2.1")
              androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
              androidTestImplementation("androidx.compose.ui:ui-test-junit4")
          }
          KTS

          # --- minimal Manifest / theme / icons (only if missing) ---
          [ -f app/src/main/AndroidManifest.xml ] || cat > app/src/main/AndroidManifest.xml <<'XML'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <application
                  android:label="OnePlan"
                  android:icon="@mipmap/ic_launcher"
                  android:roundIcon="@mipmap/ic_launcher_round"
                  android:theme="@style/Theme.OnePlan">
                  <activity
                      android:name="com.oneplan.app.MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          XML

          [ -f app/proguard-rules.pro ] || printf "# (empty)\n" > app/proguard-rules.pro

          [ -f app/src/main/res/values/themes.xml ] || cat > app/src/main/res/values/themes.xml <<'XML'
          <resources>
              <style name="Theme.OnePlan" parent="Theme.Material3.DayNight.NoActionBar"/>
          </resources>
          XML

          [ -f app/src/main/res/values/colors.xml ] || cat > app/src/main/res/values/colors.xml <<'XML'
          <resources><color name="oneplan_primary">#2F80ED</color></resources>
          XML

          [ -f app/src/main/res/drawable/ic_launcher_foreground.xml ] || cat > app/src/main/res/drawable/ic_launcher_foreground.xml <<'XML'
          <vector xmlns:android="http://schemas.android.com/apk/res/android" android:width="108dp" android:height="108dp" android:viewportWidth="108" android:viewportHeight="108">
            <path android:fillColor="#2F80ED" android:pathData="M0,0h108v108h-108z"/>
            <path android:fillColor="#FFFFFF" android:pathData="M24,54h60v8h-60z"/>
            <path android:fillColor="#FFFFFF" android:pathData="M24,70h40v8h-40z"/>
          </vector>
          XML

          [ -f app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml ] || cat > app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml <<'XML'
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@android:color/white"/>
            <foreground android:drawable="@drawable/ic_launcher_foreground"/>
          </adaptive-icon>
          XML

          [ -f app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml ] || cat > app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml <<'XML'
          <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@android:color/white"/>
            <foreground android:drawable="@drawable/ic_launcher_foreground"/>
          </adaptive-icon>
          XML

          [ -f app/src/main/java/com/oneplan/app/MainActivity.kt ] || cat > app/src/main/java/com/oneplan/app/MainActivity.kt <<'KOT'
          package com.oneplan.app
          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Modifier
          import androidx.compose.foundation.layout.padding

          class MainActivity: ComponentActivity() {
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContent {
                MaterialTheme {
                  var tab by remember { mutableStateOf(0) }
                  Scaffold(topBar = { TopAppBar(title = { Text("OnePlan") }) }) { pad ->
                    Text(if (tab==0) "Budget — coming next" else "Meals — coming next",
                        modifier = Modifier.padding(pad))
                  }
                }
              }
            }
          }
          KOT

          # --- bump versionCode file so APK version progresses ---
          VC_FILE=".oneplan_versioncode"
          VC=$(( $(cat "$VC_FILE" 2>/dev/null || echo 0) + 1 ))
          echo "$VC" > "$VC_FILE"

      - name: Build (assembleDebug)
        run: ./gradlew --no-daemon --stacktrace assembleDebug

      - name: Upload APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: oneplan-debug-apk
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error

      - name: Refresh FULL_CODE_DUMP.txt at repo root
        shell: bash
        run: |
          set -euo pipefail
          OUT="FULL_CODE_DUMP.txt"
          TS="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          {
            echo "# OnePlan — full source dump ($TS)"
            echo
            echo "## File list"
            git ls-files | sort
            echo
            echo "## Sources"
            git ls-files ':!**/*.png' ':!**/*.jpg' ':!**/*.jpeg' ':!**/*.webp' ':!**/*.gif' ':!**/*.keystore' ':!**/*.jks' \
            | while read -r f; do
                echo -e "\n-----8<----- FILE: $f -----8<-----\n"
                sed -n '1,5000p' "$f" || true
              done
          } > "$OUT"
          echo "Wrote $OUT"

      - name: Commit & push FULL_CODE_DUMP.txt (and version bump)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git add FULL_CODE_DUMP.txt .oneplan_versioncode
          git -c user.name="github-actions" -c user.email="actions@users.noreply.github.com" \
            commit -m "ci: refresh FULL_CODE_DUMP and bump versionCode [skip ci]" || echo "no changes to commit"
          git push || true

      - name: Upload FULL_CODE_DUMP.txt as artifact (convenience)
        uses: actions/upload-artifact@v4
        with:
          name: FULL_CODE_DUMP
          path: FULL_CODE_DUMP.txt
