name: OnePlan — Self-Heal + Build + Auto-Dump
on:
  workflow_dispatch:
  push:
    branches: [ refactor/v1 ]

permissions:
  contents: write   # allow committing FULL_CODE_DUMP back to repo

jobs:
  heal_build_dump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java & Gradle
        uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '17' }
      - uses: gradle/actions/setup-gradle@v3

      # --- SELF-HEAL GRADLE & DEPENDENCIES ---
      - name: Normalize Gradle layout
        shell: bash
        run: |
          cat > build.gradle.kts <<'KTS'
// Root minimal to avoid duplicate plugins.
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
KTS
          cat > settings.gradle.kts <<'KTS'
pluginManagement {
    repositories { google(); mavenCentral(); gradlePluginPortal() }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_PROJECT)
    repositories { google(); mavenCentral() }
}
rootProject.name = "OnePlan"
include(":app")
KTS
          grep -q 'android.useAndroidX=true' gradle.properties 2>/dev/null || cat >> gradle.properties <<'PROPS'
org.gradle.jvmargs=-Xmx3g -Dfile.encoding=UTF-8
android.useAndroidX=true
kotlin.code.style=official
PROPS

      - name: Ensure app/build.gradle.kts (Room + DataStore + Nav + Compose)
        shell: bash
        run: |
          cat > app/build.gradle.kts <<'KTS'
plugins {
    id("com.android.application") version "8.5.2"
    kotlin("android") version "1.9.23"
    id("com.google.devtools.ksp") version "1.9.23-1.0.20"
}
android {
    namespace = "com.oneplan.app"
    compileSdk = 34
    defaultConfig {
        applicationId = "com.oneplan.app"
        minSdk = 24
        targetSdk = 34
        val vc = (System.getenv("VC") ?: runCatching {
            file("${rootDir}/.oneplan_versioncode").takeIf { it.exists() }?.readText()?.trim()
        }.getOrNull() ?: "1").toInt()
        versionCode = vc
        versionName = "0.4.$vc"
        vectorDrawables { useSupportLibrary = true }
    }
    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
        debug { isDebuggable = true }
    }
    buildFeatures { compose = true }
    composeOptions { kotlinCompilerExtensionVersion = "1.5.12" }
    packaging { resources { excludes += "/META-INF/{AL2.0,LGPL2.1}" } }
    compileOptions { sourceCompatibility = JavaVersion.VERSION_17; targetCompatibility = JavaVersion.VERSION_17 }
    kotlinOptions { jvmTarget = "17" }
}
dependencies {
    val composeBom = platform("androidx.compose:compose-bom:2024.08.00")
    implementation(composeBom); androidTestImplementation(composeBom)
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.activity:activity-compose:1.9.2")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.5")
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")
    implementation("androidx.compose.material:material-icons-extended")
    implementation("androidx.navigation:navigation-compose:2.7.7")
    implementation("androidx.datastore:datastore-preferences:1.1.1")
    val room = "2.6.1"
    implementation("androidx.room:room-runtime:$room")
    implementation("androidx.room:room-ktx:$room")
    ksp("androidx.room:room-compiler:$room")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
}
KTS

      - name: Wire LocalRepos provider + MainActivity
        shell: bash
        run: |
          cat > app/src/main/java/com/oneplan/app/di.kt <<'KOT'
package com.oneplan.app
import android.content.Context
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.intPreferencesKey
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import androidx.room.Room
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
val Context.dataStore by preferencesDataStore("oneplan_prefs")
class Repos(context: Context) {
    private val db = Room.databaseBuilder(context, OnePlanDb::class.java, "oneplan.db")
        .fallbackToDestructiveMigration().build()
    val budget = db.budget()
    val meals = db.meals()
    private val currencyKey = stringPreferencesKey("currency")
    private val caloriesKey = intPreferencesKey("daily_calories")
    val currencyFlow: Flow<String> = context.dataStore.data.map { it[currencyKey] ?: "USD" }
    val dailyCaloriesFlow: Flow<Int> = context.dataStore.data.map { it[caloriesKey] ?: 2000 }
    suspend fun setCurrency(context: Context, value: String) { context.dataStore.edit { it[currencyKey] = value } }
    suspend fun setDailyCalories(context: Context, value: Int) { context.dataStore.edit { it[caloriesKey] = value } }
}
val LocalRepos = staticCompositionLocalOf<Repos> { error("LocalRepos not provided") }
KOT
          cat > app/src/main/java/com/oneplan/app/MainActivity.kt <<'KOT'
package com.oneplan.app
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.runtime.CompositionLocalProvider
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val repos = Repos(applicationContext)
        setContent {
            CompositionLocalProvider(LocalRepos provides repos) {
                OnePlanTheme { OnePlanApp() }
            }
        }
    }
}
KOT

      - name: Bump versionCode
        shell: bash
        run: |
          VC_FILE=".oneplan_versioncode"
          VC=$(test -f "$VC_FILE" && tr -d '\r\n' < "$VC_FILE" || echo 1)
          [[ "$VC" =~ ^[0-9]+$ ]] || VC=1
          echo $((VC+1)) > "$VC_FILE"

      - name: Build APK (uses Gradle wrapper from cache or Gradle distro)
        run: gradle --no-daemon --stacktrace assembleDebug

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: oneplan-debug-apks
          path: app/build/outputs/apk/debug/*.apk
          if-no-files-found: error

      - name: Generate FULL_CODE_DUMP.txt and commit
        shell: bash
        run: |
          OUT="FULL_CODE_DUMP.txt"
          echo "# OnePlan — full source dump ($(date -u +%Y-%m-%dT%H:%M:%SZ))" > "$OUT"
          echo >> "$OUT"
          echo "## File list" >> "$OUT"
          git ls-files | sort >> "$OUT"
          echo >> "$OUT"
          echo "## Sources" >> "$OUT"
          git ls-files ':!**/*.png' ':!**/*.jpg' ':!**/*.jpeg' ':!**/*.webp' ':!**/*.gif' ':!**/*.keystore' ':!**/*.jks' \
            | while read -r f; do
                echo -e "\n\n-----8<----- FILE: $f -----8<-----\n" >> "$OUT"
                sed -n '1,5000p' "$f" >> "$OUT" || true
              done
          git add "$OUT" .oneplan_versioncode app/build.gradle.kts build.gradle.kts settings.gradle.kts
          git -c user.name="oneplan-bot" -c user.email="bot@users.noreply.github.com" commit -m "ci(self-heal): build + refresh FULL_CODE_DUMP"
          git push